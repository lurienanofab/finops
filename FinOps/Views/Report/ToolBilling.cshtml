@using FinOps.Models;
@using LNF.Repository.Data;

@model ToolBillingModel
@{
    ViewBag.Title = "Tool Billing Report";
}

@section styles{
    <style>
        .reservation-durations > tbody > tr > td {
            vertical-align: middle;
        }
    </style>
}

<h2>Tool Billing Report</h2>

<div>
    <strong><a href="@Url.Action("Return", "Home")">&larr; Back to Main Page</a></strong>
</div>

<hr />

@using (Html.BeginForm("ToolBilling", "Report", FormMethod.Get, new { @class = "form-horizontal" }))
{
    <div class="form-group">
        @Html.LabelFor(x => x.StartDate, "Start Date", new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control start-date", placeholder = "YYYY-MM-DD" })
        </div>
        @Html.LabelFor(x => x.EndDate, "End Date", new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control end-date", placeholder = "YYYY-MM-DD" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Client, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.Client, new { @class = "form-control" })
        </div>
        @Html.LabelFor(x => x.Account, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.Account, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Resource, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.Resource, new { @class = "form-control" })
        </div>
        @Html.LabelFor(x => x.ProcessTech, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.ProcessTech, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Activity, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.Activity, new { @class = "form-control" })
        </div>
        @Html.LabelFor(x => x.ReservationID, new { @class = "control-label col-sm-2" })
        <div class="col-sm-1">
            @Html.TextBoxFor(x => x.ReservationID, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <button type="submit" class="btn btn-primary">Get Data</button>
        </div>
    </div>
}

<hr />

@if (Model.Durations != null)
{
    if (Model.ReservationID.GetValueOrDefault(0) == 0)
    {
        <table class="table table-hover reservation-durations">
            <thead>
                <tr>
                    <th>ReservationID</th>
                    <th>Activity</th>
                    <th>Resource</th>
                    <th>Process Tech</th>
                    <th>Client</th>
                    <th>Account</th>
                    <th class="text-center" style="width: 70px;">Started</th>
                    <th class="text-center" style="width: 70px;">Cancelled</th>
                    <th class="text-center" style="width: 70px;"><span data-toggle="tooltip" data-placement="top" data-container="body" title="Cancelled Before Cutoff">CBC</span></th>
                    <th style="width: 85px;">Begin</th>
                    <th style="width: 85px;">End</th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The scheduled reservation time.">Scheduled</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The actual time used.">Actual</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The maximum chargeable time.">Chargeable</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The time the reservation exceeded the scheduled end time.">Overtime</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The time covered by overlapping reservations.">Transferred</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The total chargeable time minus the transferred duration (includes overtime).">Utilized</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The time billed at the standard rate (excludes overtime).">Standard</span></th>
                    <th class="text-right" style="width: 80px;"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The percentage of the total charge that was forgiven.">Forgiven %</span></th>
                    <th class="text-right"><span data-toggle="tooltip" data-placement="top" data-container="body" title="The total charge for this reservation. Click the ReservationID to see detail.">Total Charge</span></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Durations)
                {
                    <tr>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), ReservationID = item.Reservation.ReservationID })">@item.Reservation.ReservationID</a></td>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Activity = item.Reservation.ActivityID })">@item.Reservation.ActivityName</a></td>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Resource = item.Reservation.ResourceID})">@item.Reservation.ResourceName</a></td>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), ProcessTech = item.Reservation.ProcessTechID })">@item.Reservation.ProcessTechName</a></td>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Client = item.Reservation.ClientID })">@item.Reservation.DisplayName</a></td>
                        <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Account = item.Reservation.AccountID })">@LNF.Models.Data.AccountItem.GetNameWithShortCode(item.Reservation.ShortCode, item.Reservation.AccountName)</a></td>
                        <td class="text-center">@(item.Reservation.IsStarted ? "Yes" : "No")</td>
                        <td class="text-center">@(item.Reservation.IsActive ? "No" : "Yes")</td>
                        <td class="text-center">@(item.Reservation.IsCancelledBeforeCutoff ? "Yes" : "No")</td>
                        <td>@Html.Raw(item.Reservation.BeginDateTime.ToString("MM/dd/yyyy'<br>'hh:mm:ss tt"))</td>
                        <td>@Html.Raw(item.Reservation.EndDateTime.ToString("MM/dd/yyyy'<br>'hh:mm:ss tt"))</td>
                        <td class="text-right">@item.ScheduledDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.ActualDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.ChargeDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.OverTimeDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.TransferredDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.UtilizedDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.StandardDuration.TotalMinutes.ToString("0.0000")</td>
                        <td class="text-right">@item.GetForgivenPercentage().ToString("0.00%")</td>
                        <td class="text-right">@Model.GetTotalCharge(item).ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (Model.Durations.Count() > 0)
    {
        foreach (var item in Model.Durations)
        {
            <div class="row">
                <div class="col-sm-2">
                    <h3>Details</h3>
                    <ul class="list-group">
                        <li class="list-group-item">
                            <strong>ReservationID</strong>
                            <div style="margin-left: 10px;">@item.Reservation.ReservationID</div>
                        </li>
                        <li class="list-group-item">
                            <strong>Activity</strong>
                            <div style="margin-left: 10px;">
                                <a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Activity = item.Reservation.ActivityID })">@item.Reservation.ActivityName</a>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Client</strong>
                            <div style="margin-left: 10px;">
                                <a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Client = item.Reservation.ClientID })">@item.Reservation.DisplayName</a>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Account</strong>
                            <div style="margin-left: 10px;">
                                <a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Account = item.Reservation.AccountID })">@LNF.Models.Data.AccountItem.GetNameWithShortCode(item.Reservation.ShortCode, item.Reservation.AccountName)</a>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Resource</strong>
                            <div style="margin-left: 10px;">
                                <a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), ProcessTech = item.Reservation.ProcessTechID })">@item.Reservation.ProcessTechName</a> /
                                <a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Resource = item.Reservation.ResourceID })">@item.Reservation.ResourceName</a>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Cancelled</strong>
                            <div style="margin-left: 10px;">
                                @string.Format("{0}", item.Reservation.IsActive ? "False" : "True")
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Started</strong>
                            <div style="margin-left: 10px;">
                                @string.Format("{0}", item.Reservation.IsStarted ? "True" : "False")
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Cancelled before cutoff</strong>
                            <div style="margin-left: 10px;">
                                @string.Format("{0}", item.Reservation.IsCancelledBeforeCutoff ? "True" : "False")
                            </div>
                        </li>
                        <li class="list-group-item">
                            <strong>Forgiven</strong>
                            <div style="margin-left: 10px;">
                                @string.Format("{0:0.0%}", (1 - item.Reservation.ChargeMultiplier))
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="col-sm-10">
                    <div class="row">
                        <div class="col-sm-12">
                            <h3>Durations</h3>
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>&nbsp;</th>
                                        <th>Begin</th>
                                        <th>End</th>
                                        <th class="text-right">Minutes</th>
                                        <th class="text-right">Hours</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>Scheduled&nbsp;<span class="text-muted">(Scheduled duration: EndDateTime - BeginDateTime)</span></th>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.BeginDateTime)</td>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.EndDateTime)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ScheduledDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ScheduledDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Actual&nbsp;<span class="text-muted">(Actual duration: ActualEndDateTime - ActualBeginDateTime)</span></th>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.ActualBeginDateTime)</td>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.ActualEndDateTime)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActualDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActualDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Chargeable&nbsp;<span class="text-muted">(Total chargeable time: ChargeEndDateTime - ChargeBeginDateTime)*</span></th>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.ChargeBeginDateTime)</td>
                                        <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.ChargeEndDateTime)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ChargeDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ChargeDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Activated Used&nbsp;<span class="text-muted">(Time used by an activated reservation, excluding overtime)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActivatedUsedDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActivatedUsedDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Activated Unused&nbsp;<span class="text-muted">(Time not used by an activated reservation, i.e. unused time from starting late or ending early)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActivatedUnusedDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.ActivatedUnusedDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Unactivated&nbsp;<span class="text-muted">(Time not used by an unactivated reservation, i.e. unused time from no-show reservations)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.UnactivatedDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.UnactivatedDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Over Time&nbsp;<span class="text-muted">(Time used after the scheduled end time: ActualEndDateTime - EndDateTime)</span></th>
                                        @if (item.OverTimeDuration.TotalSeconds > 0)
                                        {
                                            <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.EndDateTime)</td>
                                            <td>@string.Format("{0:MM/dd/yyyy hh:mm:ss tt}", item.Reservation.ActualEndDateTime)</td>
                                        }
                                        else
                                        {
                                            <td>--</td>
                                            <td>--</td>
                                        }
                                        <td class="text-right">@string.Format("{0:0.0000}", item.OverTimeDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.OverTimeDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Transferred&nbsp;<span class="text-muted">(Time used by overlapping reservations)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.TransferredDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.TransferredDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Utilized&nbsp;<span class="text-muted">(Time not transferred: Chargeable - Transferred)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.UtilizedDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.UtilizedDuration.TotalHours)</td>
                                    </tr>
                                    <tr>
                                        <th>Standard&nbsp;<span class="text-muted">(Time billed at the standard rate: Chargeable - Transferred - OverTime)</span></th>
                                        <td>--</td>
                                        <td>--</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.StandardDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.StandardDuration.TotalHours)</td>
                                    </tr>
                                </tbody>
                            </table>
                            <span class="text-muted">* ChargeBeginDateTime is whichever is earliest, ActualBeginDateTime or BeginDateTime. ChargeEndDateTime is whichever is latest, ActualEndDateTime or EndDateTime. Chargeable should be equal to Activated Used + Activated Unused + Unactivated + Over Time.</span>
                            <hr />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <h3>Fees</h3>
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>&nbsp;</th>
                                        <th class="text-right" style="width: 90px;">Minutes</th>
                                        <th class="text-right" style="width: 90px;">Hours</th>
                                        <th class="text-right" style="width: 90px;">Rate</th>
                                        <th class="text-right" style="width: 90px;">Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <th>Standard</th>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.Reservation.IsCancelledBeforeCutoff ? 0 : item.StandardDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.Reservation.IsCancelledBeforeCutoff ? 0 : item.StandardDuration.TotalHours)</td>
                                        <td class="text-right">@string.Format("{0:C}", item.Reservation.Cost.HourlyRate())</td>
                                        <td class="text-right">@string.Format("{0:C}", Model.GetStandardCharge(item))</td>
                                    </tr>
                                    <tr>
                                        <th>Over Time</th>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.OverTimeDuration.TotalMinutes)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.OverTimeDuration.TotalHours)</td>
                                        <td class="text-right">@string.Format("{0:C}", item.Reservation.Cost.OverTimeRate())</td>
                                        <td class="text-right">@string.Format("{0:C}", Model.GetOverTimeCharge(item))</td>
                                    </tr>
                                    <tr>
                                        <th>Booking Fee</th>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.Reservation.IsCancelledBeforeCutoff ? item.StandardDuration.TotalMinutes : 0)</td>
                                        <td class="text-right">@string.Format("{0:0.0000}", item.Reservation.IsCancelledBeforeCutoff ? item.StandardDuration.TotalHours : 0)</td>
                                        <td class="text-right">@string.Format("{0:C}", item.Reservation.Cost.BookingFeeRate())</td>
                                        <td class="text-right">@string.Format("{0:C}", Model.GetBookingFeeCharge(item))</td>
                                    </tr>
                                    <tr>
                                        <th>Per Use</th>
                                        <td class="text-right">--</td>
                                        <td class="text-right">--</td>
                                        <td class="text-right">@string.Format("{0:C}", item.Reservation.Cost.PerUseRate())</td>
                                        <td class="text-right">@string.Format("{0:C}", Model.GetPerUseCharge(item))</td>
                                    </tr>
                                    <tr>
                                        <th>Subtotal</th>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">@string.Format("{0:C}", Model.GetTotalCharge(item))</td>
                                    </tr>
                                    <tr>
                                        <th>Forgiven @@ @string.Format("{0:0.0%}", (1 - item.Reservation.ChargeMultiplier))</th>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">@string.Format("{0:C}", -1 * (Model.GetTotalCharge(item) * Convert.ToDecimal(1 - item.Reservation.ChargeMultiplier)))</td>
                                    </tr>
                                    <tr style="font-size: 12pt;">
                                        <th>Total</th>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right">&nbsp;</td>
                                        <td class="text-right"><strong>@string.Format("{0:C}", Model.GetTotalCharge(item) * Convert.ToDecimal(item.Reservation.ChargeMultiplier))</strong></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="col-sm-6">
                            <h3>Transferred</h3>
                            @if (item.TransferredDuration.TotalSeconds > 0)
                            {
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>ReservationID</th>
                                            <th>Client</th>
                                            <th class="text-right">Minutes</th>
                                            <th class="text-right">Hours</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var trans in Model.GetTransferReservations(item))
                                        {
                                            <tr>
                                                <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), ReservationID = trans.Reservation.ReservationID })">@trans.Reservation.ReservationID</a></td>
                                                <td><a href="@Url.Action("ToolBilling", "Report", new { StartDate = Model.StartDate.Value.ToString("yyyy-MM-dd"), EndDate = Model.EndDate.Value.ToString("yyyy-MM-dd"), Client = trans.Reservation.ClientID })">@trans.Reservation.DisplayName</a></td>
                                                <td class="text-right">@string.Format("{0:0.0000}", trans.UtilizedDuration.TotalMinutes)</td>
                                                <td class="text-right">@string.Format("{0:0.0000}", trans.UtilizedDuration.TotalHours)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <em class="text-muted">There are no transfer reservations</em>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}